#cloud-config

hostname: {{ user_data.system.hostname }}
manage_etc_hosts: true
ssh_pwauth: false

users:
- name: {{ user_data.system.username }}
  passwd: {{ user_data.system.password }}
  lock_passwd: false
  shell: /bin/bash
  sudo: ALL=(ALL) NOPASSWD:ALL
  {%- if user_data.system.ssh_login.github_ids %}
  ssh_import_id:
  {%- for github_id in user_data.system.ssh_login.github_ids %}
  - gh:{{ github_id }}
  {%- endfor %}
  {%- endif %}
  {%- if user_data.system.ssh_login.public_keys %}
  ssh_authorized_keys:
  {%- for public_key in user_data.system.ssh_login.public_keys %}
  - {{ public_key }}
  {%- endfor %}
  {%- endif %}

locale: en_US.UTF-8
timezone: Asia/Tokyo
ntp:
  enabled: true

package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
- hostapd
- ifupdown
- radvd
- wide-dhcpv6-client
- tcpdump
- iperf3
- ndisc6
- vnstat
- vnstati
- avahi-daemon
- apt-transport-https
- ca-certificates
- curl
- git
- gnupg
- lsb-release
- python3-pip

mounts:
- [ tmpfs, /tmp, tmpfs, "defaults,noatime,size=256m,mode=1777", "0", "0" ]

bootcmd:
- sysctl net.ipv6.conf.all.forwarding=1
- date -s $(curl "http://worldtimeapi.org/api/timezone/Asia/Tokyo.txt" | grep utc_datetime | cut -d " " -f 2)

runcmd:
- /sbin/vsixpi-bootstrap
- /sbin/vsixpi-post-installation-phase1
- /sbin/vsixpi-post-installation-phase2
- /sbin/vsixpi-post-installation-phase3

write_files:
- path: /sbin/vsixpi-bootstrap
  permissions: '0744'
  content: |
    #!/bin/bash
    git clone https://github.com/wide-vsix/vsixpi /var/lib/vsixpi && cd /var/lib/vsixpi
    pip3 install pipenv
    pipenv update
    mv /var/tmp/vsixpi.yml vsixpi.yml

- path: /etc/systemd/system/vsixpi-auto-upgrade.service
  content: |
    [Unit]
    Description=Perform force sync with github.com/wide-vsix/vsixpi

    [Service]
    Type=simple
    WorkingDirectory=/var/lib/vsixpi
    ExecStartPre=/usr/bin/git fetch origin main
    ExecStart=/usr/bin/git reset --hard FETCH_HEAD

    [Install]
    WantedBy=multi-user.target

- path: /etc/systemd/system/vsixpi-auto-upgrade.timer
  content: |
    [Unit]
    Description=Perform force sync with github.com/wide-vsix/vsixpi every 20 minutes

    [Timer]
    OnUnitActiveSec=20m

    [Install]
    WantedBy=timer.target

- path: /etc/systemd/system/vsixpi-auto-reconf.service
  content: |
    [Unit]
    Description=Reconfigure vSIX Pi just before shutdown
    Before=poweroff.target halt.target shutdown.target reboot.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    WorkingDirectory=/var/lib/vsixpi
    ExecStart=/bin/true
    ExecStop=/usr/bin/pipenv update
    ExecStop=/usr/bin/pipenv run reconfigure
    ExecStop=/sbin/vsixpi-post-installation-phase3

    [Install]
    WantedBy=multi-user.target

- path: /etc/hostapd/hostapd.conf
  content: |
    # This config was automatically generated by cloud-init.
    # Any changes added manually might be lost after restarting.
    # See: https://github.com/wide-vsix/vsixpi
    {% if user_data.access_service.wifi %}
    interface=wlan0
    bridge=br0
    driver=nl80211
    logger_syslog=-1
    logger_syslog_level=2
    logger_stdout=-1
    logger_stdout_level=2
    hw_mode=a
    channel={{ user_data.access_service.wifi.channel }}
    ieee80211d=1
    country_code=JP
    ieee80211n=1
    {%- if user_data.access_service.wifi and user_data.access_service.wifi.use_11ac %}
    ieee80211ac=1
    wmm_enabled=1
    {%- endif %}
    ssid={{ user_data.access_service.wifi.ssid }}
    auth_algs=1
    wpa=2
    wpa_key_mgmt=WPA-PSK
    rsn_pairwise=CCMP
    wpa_passphrase={{ user_data.access_service.wifi.passphrase }}
    {%- endif %}

- path: /etc/network/interfaces
  content: |
    # This config was automatically generated by cloud-init.
    # Any changes added manually might be lost after restarting.
    # See: https://github.com/wide-vsix/vsixpi

    source-directory /etc/network/interfaces.d
    auto  lo
    iface lo        inet  loopback

    auto  eth0
    iface eth0      inet  dhcp
    iface eth0      inet6 static
      address       {{ user_data.tunnel.myself.address }}
      autoconf      1
      accept_ra     2
      dad-attempts  0

    {%- if user_data.access_service.ethernet and user_data.access_service.ethernet.built_in %}
    {%- if user_data.access_service.ethernet.built_in.vlan_id %}
    auto  eth0.{{ "%-4s"|format(user_data.access_service.ethernet.built_in.vlan_id) }}
    iface eth0.{{ "%-4s"|format(user_data.access_service.ethernet.built_in.vlan_id) }} inet6 manual
    {%- endif %}
    {%- endif %}

    {%- if user_data.access_service.ethernet and user_data.access_service.ethernet.usb_adapters %}
    {%- for nic in user_data.access_service.ethernet.usb_adapters %}
    auto  {{ "%-9s"|format(nic.alias) }}
    iface {{ "%-9s"|format(nic.alias) }} inet  manual
    {%- endfor %}
    {%- endif %}

    auto  br0
    iface br0       inet  manual
    auto  wlan0
    iface wlan0     inet  manual
    {%- for provider in user_data.tunnel.providers %}
    auto  tun-{{ "%-5s"|format(provider.prefix.split(":")[3]) }}
    iface tun-{{ "%-5s"|format(provider.prefix.split(":")[3]) }} inet6 manual
    {%- endfor %}

- path: /etc/network/if-pre-up.d/vsix
  permissions: '0744'
  content: |
    #!/bin/bash
    # This config was automatically generated by cloud-init.
    # Any changes added manually might be lost after restarting.
    # See: https://github.com/wide-vsix/vsixpi
    {% set local_addr = user_data.tunnel.myself.address.split("/")[0] %}
    {%- for provider in user_data.tunnel.providers %}
    {%- set tun_name = "tun-" ~ provider.prefix.split(":")[3] %}
    {{ "if" if loop.first else "elif" }} [[ "$IFACE" == "{{ tun_name }}" ]]; then
      {%- set remote_addr = provider.endpoint %}
      if ! /sbin/ip -6 tunnel show {{ tun_name }} 1>/dev/null 2>&1; then
        /sbin/ip -6 tunnel add {{ tun_name }} mode ip6ip6 remote {{ remote_addr }} local {{ local_addr }} dev eth0 encaplimit none
      else
        /sbin/ip -6 tunnel change {{ tun_name }} mode ip6ip6 remote {{ remote_addr }} local {{ local_addr }} dev eth0 encaplimit none
      fi
    {% endfor %}
    elif [[ "$IFACE" == "br0" ]]; then
      if ! /sbin/ip link show br0 1>/dev/null 2>&1; then
        /sbin/ip link add name br0 type bridge
      fi

    elif [[ "$IFACE" == "eth0" ]]; then
      if /sbin/ip -6 address show eth0 | grep {{ local_addr }} 1>/dev/null 2>&1; then
        /sbin/ip -6 address delete {{ user_data.tunnel.myself.address }} dev eth0
      fi
    fi

- path: /etc/network/if-up.d/vsix
  permissions: '0744'
  content: |
    #!/bin/bash
    # This config was automatically generated by cloud-init.
    # Any changes added manually might be lost after restarting.
    # See: https://github.com/wide-vsix/vsixpi
    {% for provider in user_data.tunnel.providers %}
    {%- set tun_name = "tun-" ~ provider.prefix.split(":")[3] %}
    {{ "if" if loop.first else "elif" }} [[ "$IFACE" == "{{ tun_name }}" ]]; then
      {%- set table_id = "1000" ~ loop.index0 %}
      {%- set prefix = provider.prefix %}
      if [[ -z "$(/sbin/ip -6 rule list from {{ prefix }} lookup {{ table_id }})" ]]; then
        /sbin/ip -6 rule add from {{ prefix }} table {{ table_id }}
      fi
      /sbin/ip6tables -t mangle -C POSTROUTING -p tcp --tcp-flags SYN,RST SYN -o $IFACE -j TCPMSS --set-mss 1400 ||
      /sbin/ip6tables -t mangle -I POSTROUTING -p tcp --tcp-flags SYN,RST SYN -o $IFACE -j TCPMSS --set-mss 1400
      /sbin/ip -6 route flush table {{ table_id }}
      /sbin/ip -6 route add default via fe80::ea7:6 dev {{ tun_name }} table {{ table_id }}
      {%- for p in user_data.tunnel.providers %}
      /sbin/ip -6 route add {{ p.prefix }} dev br0 table {{ table_id }}
      {%- endfor %}
    {% endfor %}
    elif [[ "$IFACE" == br0 ]]; then
      {%- if user_data.access_service.ethernet and user_data.access_service.ethernet.built_in %}
      {%- if user_data.access_service.ethernet.built_in.vlan_id %}
      /sbin/ip link set dev eth0.{{ user_data.access_service.ethernet.built_in.vlan_id }} master br0
      {%- endif %}
      {%- endif %}
      {%- if user_data.access_service.ethernet and user_data.access_service.ethernet.usb_adapters %}
      {%- for nic in user_data.access_service.ethernet.usb_adapters %}
      /sbin/ip link show dev {{ nic.alias }} && /sbin/ip link set dev {{ nic.alias }} master br0 || true
      {%- endfor %}
      {%- else %}
      true
      {%- endif %}
    {%- if user_data.access_service.ethernet and user_data.access_service.ethernet.usb_adapters %}
    {% for nic in user_data.access_service.ethernet.usb_adapters %}
    elif [[ "$IFACE" == {{ nic.alias }} ]]; then
      /sbin/ip link show dev br0 && /sbin/ip link set dev {{ nic.alias }} master br0 || true
    {%- endfor %}
    {%- endif %}
    fi

- path: /etc/radvd.conf
  content: |
    # This config was automatically generated by cloud-init.
    # Any changes added manually might be lost after restarting.
    # See: https://github.com/wide-vsix/vsixpi

    interface br0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;

      prefix ::/64 {
        AdvOnLink on;
        AdvAutonomous on;
        AdvRouterAddr on;
        AdvValidLifetime {{ user_data.access_service.router_adv.lifetime.valid }};
        AdvPreferredLifetime {{ user_data.access_service.router_adv.lifetime.preferred }};
      };

      RDNSS {% for address in user_data.access_service.router_adv.nameservers %}{{ address }}{{ " " if not loop.last else "" }}{% endfor %} {
      }; 
    };

- path: /etc/wide-dhcpv6/dhcp6c.conf
  content: |
    # This config was automatically generated by cloud-init.
    # Any changes added manually might be lost after restarting.
    # See: https://github.com/wide-vsix/vsixpi

    interface eth0 {
      information-only;
      request domain-name-servers;
      request domain-name;
      script "/etc/wide-dhcpv6/dhcp6c-script";
    };
    {%- for provider in user_data.tunnel.providers %}

    interface tun-{{ provider.prefix.split(":")[3] }} {
      send ia-pd {{ loop.index0 }};
    };

    id-assoc pd {{ loop.index0 }} {
      prefix-interface br0 {
        sla-len 4;
        ifid 1;
      };
    };

    {%- endfor %}

- path: /etc/default/wide-dhcpv6-client
  content: |
    INTERFACES="eth0 {% for provider in user_data.tunnel.providers %}tun-{{ provider.prefix.split(":")[3] }}{{ " " if not loop.last else "" }}{% endfor %}"

- path: /var/netdata/docker-compose.yaml
  content: |
    version: '3'
    services:
      netdata:
        image: netdata/netdata
        container_name: netdata
        hostname: {{ user_data.project.login_name | replace(" ", "_") }}-{{ user_data.system.hostname }}
        restart: unless-stopped
        network_mode: host
        cap_add:
          - SYS_PTRACE
        security_opt:
          - apparmor:unconfined
        volumes:
          - netdataconfig:/etc/netdata
          - netdatalib:/var/lib/netdata
          - netdatacache:/var/cache/netdata
          - /etc/passwd:/host/etc/passwd:ro
          - /etc/group:/host/etc/group:ro
          - /proc:/host/proc:ro
          - /sys:/host/sys:ro
          - /etc/os-release:/host/etc/os-release:ro
    volumes:
      netdataconfig:
      netdatalib:
      netdatacache:
{%+ if user_data.access_service.ethernet and user_data.access_service.ethernet.usb_adapters %}
- path: /etc/udev/rules.d/30-persistent-net.rules
  content: |
    {%- for nic in user_data.access_service.ethernet.usb_adapters %}
    SUBSYSTEM=="net",ACTION=="add",ATTR{address}=="{{ nic.mac_address }}",NAME="{{ nic.alias }}"
    {%- endfor %}
{%+ endif %}
- path: /sbin/vsixpi-post-installation-phase1
  permissions: '0744'
  content: |
    #!/bin/bash -x
    systemctl daemon-reload
    systemctl restart udev
    {%- if user_data.access_service.wifi %}
    systemctl unmask hostapd
    systemctl enable --now hostapd
    {%- endif %}
    systemctl enable networking
    systemctl mask systemd-networkd.socket systemd-networkd.service systemd-networkd-wait-online networkd-dispatcher
    systemctl stop systemd-networkd.socket systemd-networkd.service
    systemctl restart networking
    systemctl enable --now radvd
    systemctl enable wide-dhcpv6-client && systemctl start wide-dhcpv6-client
    systemctl enable --now avahi-daemon
    {%- if user_data.maintenance %}
    {%- if user_data.maintenance.auto_upgrade %}
    systemctl enable vsixpi-auto-upgrade.service
    systemctl enable vsixpi-auto-upgrade.timer
    {%- endif %}
    {%- if user_data.maintenance.auto_reconf %}
    systemctl enable vsixpi-auto-reconf.service
    {%- endif %}
    {%- endif %}

- path: /sbin/vsixpi-post-installation-phase2
  permissions: '0744'
  content: |
    #!/bin/bash -x
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    pip3 install docker-compose
    docker-compose -f /var/netdata/docker-compose.yaml up -d

- path: /sbin/vsixpi-post-installation-phase3
  permissions: '0744'
  content: |
    #!/bin/bash -x
    ufw reset
    ufw limit ssh
    {%- for provider in user_data.tunnel.providers %}
    ufw allow proto tcp from {{ provider.prefix }} to any port 19999
    ufw route allow in on br0 out on tun-{{ provider.prefix.split(":")[3] }}
    ufw route allow in on tun-{{ provider.prefix.split(":")[3] }} out on br0
    {%- endfor %}
    ufw enable

- path: /var/tmp/vsixpi.yml
  content: |
    {{ vsixpi_yml|indent }}
