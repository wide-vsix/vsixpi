#cloud-config

hostname: {{ user_data.system.hostname }}
manage_etc_hosts: true
ssh_pwauth: false

users:
- name: {{ user_data.system.username }}
  passwd: {{ user_data.system.password }}
  lock_passwd: false
  shell: /bin/bash
  sudo: ALL=(ALL) NOPASSWD:ALL
  {%- if user_data.system.ssh_login.github_ids is defined %}
  ssh_import_id:
  {%- for github_id in user_data.system.ssh_login.github_ids %}
  - gh:{{ github_id }}
  {%- endfor %}
  {%- endif %}
  {%- if user_data.system.ssh_login.public_keys is defined %}
  ssh_authorized_keys:
  {%- for public_key in user_data.system.ssh_login.public_keys %}
  - {{ public_key }}
  {%- endfor %}
  {%- endif %}

locale: en_US.UTF-8
timezone: Asia/Tokyo
ntp:
  enabled: true

package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
- hostapd
- ifupdown
- radvd
- wide-dhcpv6-client
- tcpdump
- iperf3
- ndisc6
- vnstat
- vnstati
- avahi-daemon
- apt-transport-https
- ca-certificates
- curl
- git
- gnupg
- lsb-release
- python3-pip

mounts:
- [ tmpfs, /tmp, tmpfs, "defaults,noatime,size=256m,mode=1777", "0", "0" ]

write_files:
- path: /sbin/vsixpi-bootstrap
  permissions: '0744'
  content: |
    #!/bin/bash
    git clone https://github.com/wide-vsix/vsixpi /var/lib/vsixpi && cd /var/lib/vsixpi
    pip3 install pipenv
    pipenv update
    mv /var/tmp/vsixpi.yml vsixpi.yml

- path: /etc/systemd/system/vsixpi-auto-upgrade.service
  content: |
    [Unit]
    Description=Perform force sync with github.com/wide-vsix/vsixpi

    [Service]
    Type=simple
    WorkingDirectory=/var/lib/vsixpi
    ExecStartPre=/usr/bin/git fetch origin main
    ExecStart=/usr/bin/git reset --hard FETCH_HEAD

    [Install]
    WantedBy=multi-user.target

- path: /etc/systemd/system/vsixpi-auto-upgrade.timer
  content: |
    [Unit]
    Description=Perform force sync with github.com/wide-vsix/vsixpi every 20 minutes

    [Timer]
    OnUnitActiveSec=20m

    [Install]
    WantedBy=timer.target

- path: /etc/systemd/system/vsixpi-auto-reconf.service
  content: |
    [Unit]
    Description=Reconfigure vSIX Pi just before shutdown
    Before=poweroff.target halt.target shutdown.target reboot.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    WorkingDirectory=/var/lib/vsixpi
    ExecStart=/bin/true
    ExecStop=/usr/bin/pipenv update
    ExecStop=/usr/bin/pipenv run reconfigure

    [Install]
    WantedBy=multi-user.target

- path: /etc/hostapd/hostapd.conf
  content: |
    interface=wlan0
    bridge=br0
    driver=nl80211
    logger_syslog=-1
    logger_syslog_level=2
    logger_stdout=-1
    logger_stdout_level=2
    hw_mode=a
    channel={{ user_data.access_service.wifi.channel }}
    ieee80211d=1
    country_code=JP
    ieee80211n=1
    ieee80211ac=1
    wmm_enabled=1
    ssid={{ user_data.access_service.wifi.ssid }}
    auth_algs=1
    wpa=2
    wpa_key_mgmt=WPA-PSK
    rsn_pairwise=CCMP
    wpa_passphrase={{ user_data.access_service.wifi.passphrase }}

- path: /etc/network/interfaces
  content: |
    source-directory /etc/network/interfaces.d
    auto  lo
    iface lo       inet  loopback

    auto  eth0
    iface eth0     inet  dhcp
    iface eth0     inet6 static
      address      {{ user_data.tunnel.myself.address }}/{{ user_data.tunnel.myself.length }}
      autoconf     1
      accept_ra    2
      dad-attempts 0

    auto  eth0.{{ user_data.access_service.ethernet.vlan_id }}
    iface eth0.{{ user_data.access_service.ethernet.vlan_id }} inet6 manual

    auto  br0
    iface br0      inet  manual
    auto  wlan0
    iface wlan0    inet  manual
    {%- for _ in user_data.tunnel.providers %}
    auto  tun{{ loop.index0 }}
    iface tun{{ loop.index0 }}     inet6 manual
    {%- endfor %}

- path: /etc/network/if-pre-up.d/vsix
  permissions: '0744'
  content: |
    #!/bin/bash

    REMOTES=({% for provider in user_data.tunnel.providers %}"{{ provider.endpoint }}"{{ " " if not loop.last else "" }}{% endfor %})
    LOCAL="{{ user_data.tunnel.myself.address }}"

    if [[ "$IFACE" =~ ^tun([[:digit:]]+)$ ]]; then
      TUN_ID=${BASH_REMATCH[1]}
      REMOTE=${REMOTES[$TUN_ID]}
      if ! /sbin/ip -6 tunnel show $IFACE; then
        /sbin/ip -6 tunnel add $IFACE mode ip6ip6 remote $REMOTE local $LOCAL dev eth0 encaplimit none
      else
        /sbin/ip -6 tunnel change $IFACE mode ip6ip6 remote $REMOTE local $LOCAL dev eth0 encaplimit none
      fi
    elif [[ "$IFACE" == br0 ]]; then
      if ! /sbin/ip link show br0; then
        /sbin/ip link add name br0 type bridge
      fi
    elif [[ "$IFACE" == eth0 ]]; then
      if /sbin/ip -6 address show $IFACE | grep $LOCAL ; then
        /sbin/ip -6 address delete $LOCAL/{{ user_data.tunnel.myself.length }} dev $IFACE
      fi
    fi

- path: /etc/network/if-up.d/vsix
  permissions: '0744'
  content: |
    #!/bin/bash

    PREFIXES=({% for provider in user_data.tunnel.providers %}"{{ provider.prefix }}"{{ " " if not loop.last else "" }}{% endfor %})
    NEXTHOP="fe80::ea7:6"

    if [[ "$IFACE" =~ ^tun([[:digit:]]+)$ ]]; then
      TUN_ID=${BASH_REMATCH[1]}
      PREFIX=${PREFIXES[$TUN_ID]}
      if [[ -z "$(/sbin/ip -6 rule list from $PREFIX iif br0 lookup 1000${TUN_ID})" ]] ; then
        /sbin/ip -6 rule add from $PREFIX iif br0 table 1000${TUN_ID}
      fi
      /sbin/ip6tables -t mangle -C POSTROUTING -p tcp --tcp-flags SYN,RST SYN -o $IFACE -j TCPMSS --set-mss 1400 ||
      /sbin/ip6tables -t mangle -I POSTROUTING -p tcp --tcp-flags SYN,RST SYN -o $IFACE -j TCPMSS --set-mss 1400
      /sbin/ip -6 route add default via ${NEXTHOP} dev ${IFACE} table 1000${TUN_ID}
    elif [[ "$IFACE" == br0 ]]; then
      /sbin/ip link set dev eth0.{{ user_data.access_service.ethernet.vlan_id }} master br0
    fi

- path: /etc/radvd.conf
  content: |
    interface br0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;

      prefix ::/64 {
        AdvOnLink on;
        AdvAutonomous on;
        AdvRouterAddr on;
        AdvValidLifetime 3600;
        AdvPreferredLifetime 3600;
      };

      RDNSS {% for address in user_data.access_service.dns64_servers %}{{ address }}{{ " " if not loop.last else "" }}{% endfor %} {
      }; 
    };

- path: /etc/wide-dhcpv6/dhcp6c.conf
  content: |
    interface eth0 {
      information-only;
      request domain-name-servers;
      request domain-name;
      script "/etc/wide-dhcpv6/dhcp6c-script";
    };
    {%- for _ in user_data.tunnel.providers %}

    interface tun{{ loop.index0 }} {
      send ia-pd {{ loop.index0 }};
    };

    id-assoc pd {{ loop.index0 }} {
      prefix-interface br0 {
        sla-len 4;
        ifid 1;
      };
    };

    {%- endfor %}

- path: /etc/default/wide-dhcpv6-client
  content: |
    INTERFACES="eth0 {% for _ in user_data.tunnel.providers %}tun{{ loop.index0 }}{{ " " if not loop.last else "" }}{% endfor %}"

- path: /var/netdata/docker-compose.yaml
  permissions: '0744'
  content: |
    version: '3'
    services:
      netdata:
        image: netdata/netdata
        container_name: netdata
        hostname: example.com # set to fqdn of host
        ports:
          - 19999:19999
        restart: unless-stopped
        cap_add:
          - SYS_PTRACE
        security_opt:
          - apparmor:unconfined
        volumes:
          - netdataconfig:/etc/netdata
          - netdatalib:/var/lib/netdata
          - netdatacache:/var/cache/netdata
          - /etc/passwd:/host/etc/passwd:ro
          - /etc/group:/host/etc/group:ro
          - /proc:/host/proc:ro
          - /sys:/host/sys:ro
          - /etc/os-release:/host/etc/os-release:ro
        networks:
          - dualstack
    volumes:
      netdataconfig:
      netdatalib:
      netdatacache:
    networks:
      dualstack:
        enable_ipv6: true
        ipam:
          config:
            - subnet: fd00:4690::/64
              gateway: fd00:4690::1

- path: /var/tmp/cloud-config-runcmd-phase1.sh
  permissions: '0744'
  content: |
    #!/bin/bash -x

    systemctl daemon-reload
    systemctl unmask hostapd
    systemctl enable --now hostapd
    systemctl enable networking
    systemctl mask systemd-networkd.socket systemd-networkd.service systemd-networkd-wait-online networkd-dispatcher
    systemctl stop systemd-networkd.socket systemd-networkd.service
    systemctl restart networking
    systemctl enable --now radvd
    systemctl enable wide-dhcpv6-client && systemctl start wide-dhcpv6-client
    systemctl enable --now avahi-daemon
    {%- if 'maintenance' in  user_data %}
    {%- if user_data.maintenance.auto_upgrade %}
    systemctl enable vsixpi-auto-upgrade.service
    systemctl enable vsixpi-auto-upgrade.timer
    {%- endif %}
    {%- if user_data.maintenance.auto_reconf %}
    systemctl enable vsixpi-auto-reconf.service
    {%- endif %}
    {%- endif %}

- path: /var/tmp/cloud-config-runcmd-phase2.sh
  permissions: '0744'
  content: |
    #!/bin/bash -x

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    pip3 install docker-compose
    docker-compose -f /var/netdata/docker-compose.yaml up -d

- path: /var/tmp/cloud-config-runcmd-phase3.sh
  permissions: '0744'
  content: |
    #!/bin/bash -x

    ufw limit ssh
    {%- for provider in user_data.tunnel.providers %}
    ufw allow proto tcp from {{ provider.prefix }} to any port 19999
    {%- endfor %}
    {%- for _ in user_data.tunnel.providers %}
    ufw route allow in on br0 out on tun{{ loop.index0 }}
    {%- endfor %}
    {%- for _ in user_data.tunnel.providers %}
    ufw route allow in on tun{{ loop.index0 }} out on br0
    {%- endfor %}
    ufw enable

- path: /var/tmp/vsixpi.yml
  content: |
    {{ vsixpi_yml|indent }}

bootcmd:
- sysctl net.ipv6.conf.all.forwarding=1
- date -s $(curl "http://worldtimeapi.org/api/timezone/Asia/Tokyo.txt" | grep utc_datetime | cut -d " " -f 2)

runcmd:
- /sbin/vsixpi-bootstrap
- /var/tmp/cloud-config-runcmd-phase1.sh
- /var/tmp/cloud-config-runcmd-phase2.sh
- /var/tmp/cloud-config-runcmd-phase3.sh
