#cloud-config

hostname: {{ user_data.system.hostname }}
manage_etc_hosts: true
ssh_pwauth: false

users:
- name: {{ user_data.system.username }}
  passwd: {{ user_data.system.password }}
  lock_passwd: false
  shell: /bin/bash
  sudo: ALL=(ALL) NOPASSWD:ALL
  {%- if user_data.system.ssh_login.github_ids is defined %}
  ssh_import_id:
  {%- for github_id in user_data.system.ssh_login.github_ids %}
  - gh:{{ github_id }}
  {%- endfor %}
  {%- endif %}
  {%- if user_data.system.ssh_login.public_keys is defined %}
  ssh_authorized_keys:
  {%- for public_key in user_data.system.ssh_login.public_keys %}
  - {{ public_key }}
  {%- endfor %}
  {%- endif %}

locale: en_US.UTF-8
timezone: Asia/Tokyo
ntp:
  enabled: true

package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
- hostapd
- ifupdown
- radvd
- wide-dhcpv6-client
- tcpdump
- iperf3
- ndisc6
- vnstat
- vnstati
- avahi-daemon

mounts:
- [ tmpfs, /tmp, tmpfs, "defaults,noatime,size=256m,mode=1777", "0", "0" ]


write_files:
- path: /etc/hostapd/hostapd.conf
  content: |
    interface=wlan0
    bridge=br0
    driver=nl80211
    logger_syslog=-1
    logger_syslog_level=2
    logger_stdout=-1
    logger_stdout_level=2
    hw_mode=a
    channel={{ user_data.access_service.wifi.channel }}
    ieee80211d=1
    country_code=JP
    ieee80211n=1
    ieee80211ac=1
    wmm_enabled=1
    ssid={{ user_data.access_service.wifi.ssid }}
    auth_algs=1
    wpa=2
    wpa_key_mgmt=WPA-PSK
    rsn_pairwise=CCMP
    wpa_passphrase={{ user_data.access_service.wifi.passphrase }}

- path: /etc/network/interfaces
  content: |
    source-directory /etc/network/interfaces.d
    auto  lo
    iface lo       inet  loopback

    auto  eth0
    iface eth0     inet  dhcp
    iface eth0     inet6 static
      address      {{ user_data.tunnel.myself.address }}/{{ user_data.tunnel.myself.length }}
      autoconf     1
      accept_ra    2
      dad-attempts 0

    auto  eth0.{{ user_data.access_service.ethernet.vlan_id }}
    iface eth0.{{ user_data.access_service.ethernet.vlan_id }} inet6 manual

    auto  br0
    iface br0      inet  manual
    auto  wlan0
    iface wlan0    inet  manual
    {%- for _ in user_data.tunnel.providers %}
    auto  tun{{ loop.index0 }}
    iface tun{{ loop.index0 }}     inet6 manual
    {%- endfor %}

- path: /etc/network/if-pre-up.d/vsix
  permissions: '0755'
  content: |
    #!/bin/bash

    REMOTES=({% for provider in user_data.tunnel.providers %}"{{ provider.endpoint }}"{{ " " if not loop.last else "" }}{% endfor %})
    LOCAL="{{ user_data.tunnel.myself.address }}"

    if [[ "$IFACE" =~ ^tun([[:digit:]]+)$ ]]; then
      TUN_ID=${BASH_REMATCH[1]}
      REMOTE=${REMOTES[$TUN_ID]}
      if ! /sbin/ip -6 tunnel show $IFACE; then
        /sbin/ip -6 tunnel add $IFACE mode ip6ip6 remote $REMOTE local $LOCAL dev eth0
      else
        /sbin/ip -6 tunnel change $IFACE mode ip6ip6 remote $REMOTE local $LOCAL dev eth0
      fi
    elif [[ "$IFACE" == br0 ]]; then
      if ! /sbin/ip link show br0; then
        /sbin/ip link add name br0 type bridge
      fi
    elif [[ "$IFACE" == eth0 ]]; then
      if /sbin/ip -6 address show $IFACE | grep $LOCAL ; then
        /sbin/ip -6 address delete $LOCAL/{{ user_data.tunnel.myself.length }} dev $IFACE
      fi
    fi

- path: /etc/network/if-up.d/vsix
  permissions: '0755'
  content: |
    #!/bin/bash

    PREFIXES=({% for provider in user_data.tunnel.providers %}"{{ provider.prefix }}"{{ " " if not loop.last else "" }}{% endfor %})
    NEXTHOP="fe80::ea7:6"

    if [[ "$IFACE" =~ ^tun([[:digit:]]+)$ ]]; then
      TUN_ID=${BASH_REMATCH[1]}
      PREFIX=${PREFIXES[$TUN_ID]}
      if [[ -z "$(/sbin/ip -6 rule list from $PREFIX)" ]] ; then
        /sbin/ip -6 rule add from $PREFIX table 1000${TUN_ID}
      fi
      /sbin/ip -6 route add default via ${NEXTHOP} dev ${IFACE} table 1000${TUN_ID}
    elif [[ "$IFACE" == br0 ]]; then
      /sbin/ip link set dev wlan0 master br0
      /sbin/ip link set dev eth0.{{ user_data.access_service.ethernet.vlan_id }} master br0
    fi

- path: /etc/radvd.conf
  content: |
    interface br0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;

      prefix ::/64 {
        AdvOnLink on;
        AdvAutonomous on;
        AdvRouterAddr on;
        AdvValidLifetime 3600;
        AdvPreferredLifetime 3600;
      };

      RDNSS {% for address in user_data.access_service.dns64_servers %}{{ address }}{{ " " if not loop.last else "" }}{% endfor %} {
      }; 
    };

- path: /etc/wide-dhcpv6/dhcp6c.conf
  content: |
    interface eth0 {
      information-only;

      request domain-name-servers;
      request domain-name;

      script "/etc/wide-dhcpv6/dhcp6c-script";
    };
    {%- for _ in user_data.tunnel.providers %}

    interface tun{{ loop.index0 }} {
      send ia-pd {{ loop.index0 }};
    };

    id-assoc pd {{ loop.index0 }} {
      prefix-interface br0 {
        sla-len 4;
        ifid 1;
      };
    };

    {%- endfor %}

- path: /etc/default/wide-dhcpv6-client
  content: |
    INTERFACES="eth0 {% for _ in user_data.tunnel.providers %}tun{{ loop.index0 }}{{ " " if not loop.last else "" }}{% endfor %}"


bootcmd:
- sysctl net.ipv6.conf.all.forwarding=1

runcmd:
- systemctl unmask hostapd && systemctl enable --now hostapd
- systemctl enable networking && systemctl mask systemd-networkd.socket systemd-networkd.service systemd-networkd-wait-online networkd-dispatcher && systemctl stop systemd-networkd.socket systemd-networkd.service && systemctl restart networking
- systemctl enable --now radvd
- systemctl enable wide-dhcpv6-client && systemctl start wide-dhcpv6-client
- systemctl enable --now avahi-daemon
- |
    bash <<EOF
    bash <(curl -Ss https://my-netdata.io/kickstart.sh) --dont-wait
    EOF
- ufw limit ssh && ufw allow 19999/tcp && ufw enable

